
import Data.Foldable
import Data.List
import Example.Java.AST
import System.FilePath

format :: Show a => a -> String
format = show
join = intercalate

instance Show QName where
  show (QName names) = join "." names

instance Show Type where
  show (Type annotations qualifiers specifiers qname parameters) = show qname

instance Show Access where
  show Public    = "public"
  show Private   = "private"
  show Protected = "protected"
  show Package   = ""

instance Show Modifier where
  show Static     = "static"
  show Abstract   = "abstract"
  show Unmodified = ""

main = putStrLn $ emit file where
  file = File "Foo.java.neat" (QName ["org.example"]) [] cls
  cls  = Class [] Public Unmodified "Foo" [] []


{-
instance Show Type where
{% def show (Type annotations qualifiers specifiers qname parameters) %}
{{ qname | join "." }}
{% enddef %}
-}

{% def emit (File path package imports cls) %}
// Code generated from {{ takeFileName path }}
package {{ package }};

{% for (Import static qname wildcard) in imports %}
import {% if static %}static {% endif %}{{ qname }}{% if wildcard %}.*{% endif %};
{% endfor %}

{% with (Class annotations access modifier name parents members) = cls %}
{{ access }} {{ modifier }} class {{ name }}
{% for parent in parents %}
  {% switch parent %}
    {% case (Implements interfaces) %}
   implements {{ interfaces }}
    {% case (Extends super) %}
   extends {{ super }}
  {% endswitch %}
{% endfor %}
{
  {% for (Member annotations access element) in members %}
    {% switch element %}
      {% case (Constructor arguments (_, code)) %}

      {% case (Method qualifier modifier type' name arguments exceptions body) %}

      {% default %}
      // Unimplemented member type.
    {% endswitch %}
  {% endfor %}
}
{% endwith %}
{% enddef %}
