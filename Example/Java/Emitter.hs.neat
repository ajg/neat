
import Data.Maybe (fromMaybe)
import Example.Java.AST
import System.FilePath
import Text.Neat

main = putStrLn (emit sampleFile)


{% def emit (File path package imports cls) %}
  // Code generated from {{ takeFileName path }}
  package {{ package }};

  {% for (Import static qname wildcard) in imports %}
  import {% if static %}static {% endif %}{{ qname }}{% if wildcard %}.*{% endif %};
  {% endfor %}

  {% with (Class annotations access modifier name parents members) = cls %}
    {{ access }} {{ modifier }} class {{ name }}
    {% for parent in parents %}
      {% switch parent %}
        {% case (Implements interfaces) %}
       implements {{ join ", " interfaces }}
        {% case (Extends super) %}
       extends {{ super }}
      {% endswitch %}
    {% endfor %}
    {
      {% for (Member annotations access element) in members %}
        {{ annotations }} {{ access }} {{ emit' name element }}
      {% endfor %}
    }
  {% endwith %}
{% enddef %}

{% def emit' className element %}
  {% switch element %}
    {% case (Constructor arguments body) %}
      {{ className }}({{ join ", " arguments }}){{ fromMaybe ";" body }}
    {% case (Method qualifier modifier type' name arguments exceptions body) %}
      {{ modifier }} {{ type' }} {{ name }}({{ join ", " arguments }})
      {% if (not . null) exceptions %} throws {{ join ", " exceptions }} {% endif %}
      {{ fromMaybe ";" body }}
    {% default %}
    // Unimplemented member type.
  {% endswitch %}
{% enddef %}
