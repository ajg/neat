
{% def emit (Chunk location element) %}
  {% switch element %}
    {% case define @ (Define _ _) %}{{ location }}{{ define }}
    {% case text @ (Text _) %}{{ location }}{{ text }}
    {% default %}({{ location }}{{ element }})
  {% endswitch %}
{% enddef %}

{% def emit (Name location name) %}
{{ name }}
{% enddef %}

{% def emit (Value location value) %}
({{ value }})
{% enddef %}

{% def emit (Pattern location pattern) %}
{{ location }}{{ pattern }}
{% enddef %}

{% def emit (Location (file, line)) %}
{-# LINE {{ line }} {{ file | show }} #-}
{% enddef %}

{% def emit (Case pattern block) %}
{{ pattern }} -> {{ block }}
{% enddef %}

{% def emit (File (Block chunks)) %}
{-
  prelude ++ divide chunks ++ postlude where
    divide [] = []
    divide (chunk @ (Chunk location element) : rest) =
      output' element ++ interlude ++ divide rest where
        output' (Text text) = output location ++ text
        output' _ = output chunk
-}
{% enddef %}


{% def emit (Block chunks) %}
{-
  "(" ++ (nested $ case chunks of
      [chunk] -> nl ++ output chunk
      _       -> empty ++ appendEach (output <$> chunks)) ++ ")"
    where appendEach = concatMap $ (++) (nl ++ "++ ")
          nested = join (indent "") . lines
-}
{% enddef %}


{% def emit (element :: Element) %}
{-
  output (Text text)          = show text
  output (Bare value)         = format ++ " " ++ output value
  output (Comment _)          = empty
  output (Define name block)  = output name ++ " = " ++ output block
  output (Filter value block) = output value ++ " " ++ output block

  output (For (pattern, value) block else') =
    "let _l = list " ++ output value ++ " in if null l"
    ++ indent "then _l >>= \\" ++ output pattern ++ " -> " ++ output block
    ++ indent "else " ++ maybe empty output else'

  output (If value block else') =
    "if " ++ output value
    ++ indent "then " ++ output block
    ++ indent "else " ++ maybe empty output else'

  output (Switch value cases default') =
    "case " ++ output value ++ " of"
    ++ (output =<< cases)
    ++ maybe "" (("\n_ ->" ++) . output) default'
-}
{% enddef %}
