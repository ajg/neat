module Text.Neat.Output.Haskell2 (output) where

import Text.Neat.File
import Text.Neat.Output


instance Output File where
 {% def output (File path (Block chunks)) %}
  {% for chunk @ (Chunk location element) in chunks %}
    {% switch element %}
      {% case (Text text) %}{{ location }}{{ text }}
      {% default %}{{ chunk }}
    {% endswitch %}
  {% endfor %}
 {% enddef %}

instance Output Chunk where
 {% def output chunk @ (Chunk location element) %}
   {% switch chunk %}
    {% case (Chunk _ define @ (Define _ _)) %}{{ define }}
    {% case (Chunk _ text @ (Text _)) %}{{ location }}{{ text }}
    {% default %}({{ location }}{{ element }})
   {% endswitch %}
 {% enddef %}

instance Output Block where
 {% def output (Block chunks) %}({{ chunks | join " ++ " | nest }}){% enddef %}

instance Output Case where
 {% def output (Case pattern block) %}{{ pattern }} -> {{ block }}{% enddef %}

instance Output Location where
 {% def output (Location file line) %}{-# LINE {{ line }} {{ show file }} #-}
{% enddef %}

instance Output Function where
 {% def output (Function _ name (Pattern _ pattern)) %}{{ name }}{{ pattern }}{% enddef %}

instance Output Value where
 {% def output (Value location pipeline) %}({{ pipeline | reverse | join " $ " }}){% enddef %}

instance Output Pattern where
 {% def output (Pattern location pattern) %}{{ location }}{{ pattern }}{% enddef %}

instance Output Element where
 {% def output (Output value) %}output {{ value }}{% enddef %}
 {% def output (Comment comment) %}{{ '{' }}#{{ comment }}#{{ '}' }}{% enddef %}
 {% def output (Define function block) %}{{ function }} = {{ block }}{% enddef %}
 {% def output (Filter value block) %}{{ value }} {{ block }}{% enddef %}

 {% def output (For (Binding pattern value) block other) %}let _l = list {{ value }} in
  if (not . null) _l
    then _l >>= \{{ pattern }} -> {{ block }}
    else {{ unless other "[]" }}
 {% enddef %}

 {% def output (If value block other) %}if (not . zero) {{ value }}
  then {{ block }}
  else {{ unless other "[]" }}
 {% enddef %}

 {% def output (Switch value cases other) %}
  case {{ value }} of {{ cases }} {% if other %}
_ -> {{ other }}{% endif %}
 {% enddef %}

 {% def output (With (Binding pattern value) block) %}
  case {{ value }} of {{ pattern }} -> {{ block }}
 {% enddef %}

 {% def output (Text text) %}{{ text | prune | show }}{% enddef %}
